#!/usr/bin/python
# -*- coding: utf-8 -*-
# glenn@sensepost.com 
# snoopy_ng // 2013
# By using this code you agree to abide by the supplied LICENSE.txt

import sys
import os
from MaltegoTransform import *
import logging
from datetime import datetime
from sqlalchemy import create_engine, MetaData, select, and_
logging.basicConfig(level=logging.DEBUG,filename='/tmp/maltego_logs.txt',format='%(asctime)s %(levelname)s: %(message)s',datefmt='%Y-%m-%d %H:%M:%S')

def main():
#    print "Content-type: xml\n\n";
#    MaltegoXML_in = sys.stdin.read()
#    logging.debug(MaltegoXML_in)
#    if MaltegoXML_in <> '':
#     m = MaltegoMsg(MaltegoXML_in)

    dbms="sqlite:////root/snoopy_ng/snoopy.db" 

    TRX = MaltegoTransform()
    TRX = MaltegoTransform()
    TRX.parseArguments(sys.argv)

    drone = TRX.getVar("drone")
    location = TRX.getVar("location")
    start_time = TRX.getVar("start_time", "2000-01-01 00:00:00.0")
    end_time = TRX.getVar("end_time", "2037-01-01 00:00:00.0")
    mac = TRX.getVar("mac")
    ssid = TRX.getVar("ssid")

    st_obj = datetime.strptime(start_time,"%Y-%m-%d %H:%M:%S.%f")
    et_obj = datetime.strptime(end_time,"%Y-%m-%d %H:%M:%S.%f")

    db = create_engine(dbms)
    #db.echo = True
    metadata = MetaData(db)
    metadata.reflect()

    proxs = metadata.tables['proximity_sessions']
    vends = metadata.tables['vendors']

    filters = []
    s = select([proxs], and_(*filters))

    if start_time is not None:
        filters.append(proxs.c.first_obs >= st_obj)
    if end_time is not None:
        filters.append(proxs.c.last_obs <= et_obj)
    if drone is not None:
        filters.append(proxs.c.drone == drone)
    if location is not None:
        filters.append(proxs.c.location == location)
    if mac is not None:
        filters.append(proxs.c.mac == mac)
    if ssid is not None:
        filters.append(ssids.c.ssid == ssid)

    #Custom query per transform, but apply filter with and_(*filters)
    s = select([proxs.c.drone], and_(*filters)).distinct()
    r = db.execute(s)
    results = r.fetchall()
    results = [t[0] for t in results]
    TRX = MaltegoTransform()

    for drone in results:
        NewEnt=TRX.addEntity("snoopy.Drone", drone)
        NewEnt.addAdditionalFields("drone","drone", "strict",drone)
        NewEnt.addAdditionalFields("start_time", "start_time", "strict", start_time)
        NewEnt.addAdditionalFields("end_time", "end_time", "strict", end_time)
        NewEnt.addAdditionalFields("location", "location", "strict", location)
    TRX.returnOutput()

main()
